
this was a university project 

public abstract interface  Academic   {
    
    public String speciality () ;
    public void academicRules () ;
    
}
// _________________________________
public class Administrative extends Employee {

    private String jopposition ;
    private String phone ;
    private int officenum ;
    private String [] service ;

    public Administrative() {
    }
    
    public Administrative(String jopposition, String phone, int officenum, String[] service) {
        this.jopposition = jopposition;
        this.phone = phone;
        this.officenum = officenum;
        this.service = service;
    }

    public Administrative(String jopposition, String phone, int officenum, String[] service, String department, int yearofservice, int workHoursinmonth, double payInHour, String Typeofcertificate) {
        super(department, yearofservice, workHoursinmonth, payInHour, Typeofcertificate);
        this.jopposition = jopposition;
        this.phone = phone;
        this.officenum = officenum;
        this.service = service;
    }

    public Administrative(String jopposition, String phone, int officenum, String[] service, String department, int yearofservice, int workHoursinmonth, double payInHour, String Typeofcertificate, long Id, String name, String address, int age, String password) {
        super(department, yearofservice, workHoursinmonth, payInHour, Typeofcertificate, Id, name, address, age, password);
        this.jopposition = jopposition;
        this.phone = phone;
        this.officenum = officenum;
        this.service = service;
    }
    public String getJopposition() {
        return jopposition;
    }

    public void setJopposition(String jopposition) {
        this.jopposition = jopposition;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public int getOfficenum() {
        return officenum;
    }

    public void setOfficenum(int officenum) {
        this.officenum = officenum;
    }

    public String[] getService() {
        return service;
    }

    public void setService(String[] service) {
        this.service = service;
    }

    @Override
    public String toString() {
        return "Administrative{" + "jopposition=" + jopposition + ", phone=" + phone + ", officenum=" + officenum + ", service=" + service + '}';
    }

    public void contactinfo (){
        System.out.println("the office number is   "+this.officenum +"\t   the phone number is  "+this.phone);
    }
    
    public boolean checkService (String h ){
        
        boolean b = false ;
        for ( int i =0 ; i< service.length ; i++ ){
            if (service[i].equalsIgnoreCase(h)){
                b = true ;
            }
        }
        return b ;
    }
    
    public void changePosition (){
        if (this.jopposition.equals("head of the department")&& this.getYearofservice() == 5) {
            System.out.println(" you have finished work as a head of department ..  thank you  .. go ahead ");
        }
    }
    
    public double newSalary (){
        System.out.println(" please enter m if you have a master or if you have Ph.D enter p  ");
        char a = in.next().charAt(0) ;
        
        if (a == 'm'){
            return salary()+(salary()*0.25) ;
        }
        
        if (a == 'p'){
            return salary()+(salary()*0.50) ;
        }
        
        else return salary() ;
    }
    
    @Override
    public void numOfleaving() {
        
          System.out.println("enter the number of days off in month ");
        int r = in.nextInt() ;
        if (r > 7 ){
            System.out.println("you have been absent mor than  allowed limit  and there is the new salary for you ");
            System.out.println(discount());
        }
        else if ( r < 5 ){
            System.out.println("you can take  another  "+(7-r)+"  days off  ");
        }
    }

    @Override
    public void goup() {  
          System.out.println(" enter the number of working years ");
        int r = in.nextInt() ;
        if (r > 10 ){
            System.out.println(" you can   apply to get a high work position ");
        }
        else {
            System.out.println(" you have not pass the limit of working years to get a high work position  ");
        }
         }
    @Override
    public void isfired() {
        System.out.println(" enter the number of days off in this year ");
        int q = in.nextInt();
        System.out.println(" how long have you worked for this company  ");
        int h = in.nextInt() ;
        if (q > 60 && h < 3){
            System.out.println(" you're fired ");
        }
        else {
            System.out.println(" you're a good employee , keep on ");
        }
    }
    @Override
    public String  typeOfPerson() {
            
       return " administrative  "+this.jopposition ;     
    }
}
// ________________________________________________________________
public abstract class Employee extends Person implements Paid {
    Scanner in = new Scanner (System.in) ;
    
    private String department ;
    private int yearofservice ;
    private int workHoursinmonth ;
    private double payInHour ;
    private String Typeofcertificate ;
    
    public Employee (){
        
    }

    public Employee(String department, int yearofservice, int workHoursinmonth, double payInHour, String Typeofcertificate) {
        this.department = department;
        this.yearofservice = yearofservice;
        this.workHoursinmonth = workHoursinmonth;
        this.payInHour = payInHour;
        this.Typeofcertificate = Typeofcertificate;
    }

    public Employee(String department, int yearofservice, int workHoursinmonth, double payInHour, String Typeofcertificate, long Id, String name, String address, int age,  String password) {
        super( Id ,name, address, age, password);
        this.department = department;
        this.yearofservice = yearofservice;
        this.workHoursinmonth = workHoursinmonth;
        this.payInHour = payInHour;
        this.Typeofcertificate = Typeofcertificate;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public int getYearofservice() {
        return yearofservice;
    }

    public void setYearofservice(int yearofservice) {
        this.yearofservice = yearofservice;
    }

    public int getWorkHoursinmonth() {
        return workHoursinmonth;
    }

    public void setWorkHoursinmonth(int workHoursinmonth) {
        this.workHoursinmonth = workHoursinmonth;
    }

    public double getPayInHour() {
        return payInHour;
    }

    public void setPayInHour(double payInHour) {
        this.payInHour = payInHour;
    }

    public String getTypeofcertificate() {
        return Typeofcertificate;
    }

    public void setTypeofcertificate(String Typeofcertificate) {
        this.Typeofcertificate = Typeofcertificate;
    }

    @Override
    public String toString() {
        return "Employee{" + "department=" + department + ", yearofservice=" + yearofservice + ", workHoursinmonth=" + workHoursinmonth + ", payInHour=" + payInHour + ", Typeofcertificate=" + Typeofcertificate + '}';
    }
   
    @Override
    public double salary (){
      return   payInHour  * workHoursinmonth ;
    }
            
    public double changesalary (){
        System.out.println("if you have been absent enter - else if you have been exra work time enter + ");
        char j = in.next().charAt(0) ;
        if (j == '-'){
            return discount();
        }
        else if (j == '+') return increase(); 
        else return salary();
    } 
    @Override
    public  double discount (){
        return salary() - (salary()*0.5);
    }
    @Override
    public  double increase (){
         return salary()+ (salary()*0.5);
    }
    
    public void endOfWork (){
        if (this.getAge() > 60) {
            System.out.println("Thank you, you have been great in your work, I wish you a happy life");
        } 
    }
    public abstract void numOfleaving ();
    public abstract void goup ();
    public abstract void isfired ();
}
// ________________________________________________________________
public abstract interface Paid {
    
    public abstract double salary ();
    public abstract double discount ();
    public abstract double increase ();    
}
// ________________________________________________________________
public abstract class Person {

    private long Id;
    private String name;
    private String address;
    private int age;

    private String password;

    public abstract String typeOfPerson();

    public Person() {
        welcome();
    }

    public Person(long Id, String name, String address, int age, String password) {
        Scanner in = new Scanner(System.in);
        this.Id = Id;
        this.name = name;
        this.address = address;
        this.age = age;

        if (isStrong(password) == 0) {
            System.out.println("please enter the stronger password ");
            System.out.println(" the string passwode is contaie a 1 char & 5 numbeds  & one of (*,/,+,-,#,!)");

            this.password = in.nextLine();
        }

    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public long getId() {
        return Id;
    }

    public void setId(int Id) {
        this.Id = Id;
    }

    @Override
    public String toString() {
        return "Person{" + "name=" + name + ", address=" + address + ", password=" + password + ", age=" + age + ", Id=" + Id + '}';
    }

    public int isStrong(String password) {
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < password.length(); i++) {
            if (Character.isDigit(password.charAt(i))) {
                a++;
            } else if (Character.isLetter(password.charAt(i))) {
                b++;
            } else if (password.charAt(i) == '*' || password.charAt(i) == '/' || password.charAt(i) == '+'
                    || password.charAt(i) == '-' || password.charAt(i) == '!' || password.charAt(i) == '#') {
                c++;
            }
        }
       
        if (b >= 1 && a >= 5 && c >= 1) {
            return 1;
        } else {
            return 0; // week 
        }
    }

    public String getinfo() {
        return " the Id is  " + this.Id + "  the name is  " + this.name + "  the address is  " + this.address + "  the age is  " + this.age ;
    }

    public void welcome() {
        System.out.println(" welcome  , you can creat your person account & please give us the required  information ");
    }
}
// ________________________________________________________________
public class Student extends Person implements Academic  {

    private String speciality;
    private int[] numofhours;
    private int[] marks;
    private double previosave;
    private int previounumofhoure;
    private int priceofhoure;

    public Student() {
    }

    public Student(String speciality, int[] numofhours, int[] marks, double previosave, int priceofhoure) {
        this.speciality = speciality;
        this.numofhours = numofhours;
        this.marks = marks;
        this.previosave = previosave;
        this.priceofhoure = priceofhoure;
    }

    public Student(String speciality, int[] numofhours, int[] marks, double previosave, int priceofhoure, long Id, String name, String address, String password, int age) {
        super(Id, name, address, age, password);
        this.speciality = speciality;
        this.numofhours = numofhours;
        this.marks = marks;
        this.previosave = previosave;
        this.priceofhoure = priceofhoure;
    }

    public String getspeciality() {
        return speciality;
    }

    public void setspeciality(String speciality) {
        this.speciality = speciality;
    }

    public int[] getNumofhours() {
        return numofhours;
    }

    public void setNumofhours(int[] numofhours) {
        this.numofhours = numofhours;
    }

    public int[] getMarks() {
        return marks;
    }

    public void setMarks(int[] marks) {
        this.marks = marks;
    }

    public double getPreviosave() {
        return previosave;
    }

    public void setPreviosave(double previosave) {
        this.previosave = previosave;
    }

    public int getPriceofhoure() {
        return priceofhoure;
    }

    public void setPriceofhoure(int priceofhoure) {
        this.priceofhoure = priceofhoure;
    }

    @Override
    public String toString() {
        return "Student{" + "speciality=" + speciality + ", numofhours=" + numofhours + ", marks=" + marks + ", previosave=" + previosave + ", priceofhoure=" + priceofhoure + '}';
    }

    public void entryRequirment() {
        if (this.previosave > 65 && this.previounumofhoure > 12) {
            System.out.println("accepted , you can joim to this semester ");
        } else {
            System.out.println("not accepted ,sorry you can't joim to this semester  ");
        }
    }

    public void entryRequirment(double previosave, int previounumofhoure) {
        if (previosave > 65 && previounumofhoure > 12) {
            System.out.println("accepted , you can joim to this semester ");
        } else {
            System.out.println("not accepted ,sorry you can't joim to this semester  ");
        }
    }

    public double findave() {

        double a = 0, b = 0;
        for (int i = 0; i < numofhours.length; i++) {
            a += numofhours[i] * marks[i];
            b += numofhours[i];
        }
        return a / b;
    }

    public double getprice() {
        double a = 0.0;
        for (int i = 0; i < numofhours.length; i++) {
            a += numofhours[i];
        }
        return a * priceofhoure;
    }

    public double newprice() {
        double r = findave();
        if (r > 90) {
            return 0;
        } else if (r >= 80 && r < 90) {
            return getprice() / 2;
        } else {
            return getprice();
        }
    }
    @Override
    public String speciality() {
        return this.speciality;
    }
    @Override
    public void academicRules() {

        System.out.println("the rules foe students : /n"
                + " the limit of absence for each class is 6 /n"
                + " you will pass the class if you get a mark ore than 60 /t "
                + "you will take a discount on your fees if you get a mark high than 85 /n "
                + "nand your fees will be zero if you get a mark more than 90  ");

    }
    @Override
    public String typeOfPerson() {

       return "Student  " + this.speciality ;

    }
}

// ________________________________________________________________
public class Teacher extends Employee implements Academic  {

    private String[] courses;
    private int numOfClasses;
    private String email;
    private int innernum;
    private String speciality;

    public Teacher() {
    }

    @Override
    public String toString() {
        return "Teacher{" + "courses=" + courses + ", numOfClasses=" + numOfClasses + ", email=" + email + ", innernum=" + innernum + ", speciality=" + speciality + '}';
    }

    
    
    public Teacher(String[] courses, int numOfClasses, String email, int innernum, String speciality) {
        this.courses = courses;
        this.numOfClasses = numOfClasses;
        this.email = email;
        this.innernum = innernum;
        this.speciality = speciality;
    }

    public Teacher(String[] courses, int numOfClasses, String email, int innernum, String speciality, String department, int yearofservice, int workHoursinmonth, double payInHour, String Typeofcertificate) {
        super(department, yearofservice, workHoursinmonth, payInHour, Typeofcertificate);
        this.courses = courses;
        this.numOfClasses = numOfClasses;
        this.email = email;
        this.innernum = innernum;
        this.speciality = speciality;
    }

    public Teacher(String[] courses, int numOfClasses, String email, int innernum, String speciality, String department, int yearofservice, int workHoursinmonth, double payInHour, String Typeofcertificate, long Id, String name, String address, int age, String password) {
        super(department, yearofservice, workHoursinmonth, payInHour, Typeofcertificate, Id, name, address, age, password);
        this.courses = courses;
        this.numOfClasses = numOfClasses;
        this.email = email;
        this.innernum = innernum;
        this.speciality = speciality;
    }

  

    public String[] getCurses() {
        return courses;
    }

    public void setCurses(String[] curses) {
        this.courses = curses;
    }
    
     public void setspeciality(String speciality) {
        this.speciality = speciality;
    }

    public int getNumOfClasses() {
        return numOfClasses;
    }

    public void setNumOfClasses(int numOfClasses) {
        this.numOfClasses = numOfClasses;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public int getInnernum() {
        return innernum;
    }

    public void setInnernum(int innernum) {
        this.innernum = innernum;
    }

    public void cheack() {
        int y = courses.length;
        if (y < 5) {
            String h = "";
            int r = 5 - y;
            System.out.println("please add a " + " " + r + "  new course ");
            for (int i = 0; i < r; i++) {
                h += in.nextLine() + "\t";
            }
            addcource(h);
        } else if (y > 5) {
            System.out.println("you have a   " +(y-5) + " courses extra  ");
            removecourses();
        }
    }

    public void addcource(String h) {
        int q = courses.length;
        String arr[] = new String[q];
        for (int i = 0; i < q; i++) {
            arr[i] = courses[i];
        }
        arr[q] = h;
        System.out.println("the new courses for you ");
        System.out.println(Arrays.toString(arr));
    }

    public void removecourses() {
        System.out.println("this is your courses ");
        for (int i = 0 ; i< 5 ; i++){
            System.out.println(courses[i]+"\t");
        }
    }
    public String  contactinfo (){
        return this.innernum +"\t" +this.email ;
    }
    @Override
    public void numOfleaving() {
        System.out.println("enter the number of days off in month ");
        int r = in.nextInt() ;
        if (r > 5){
            System.out.println("you have been absent mor than  allowed limit  and there is the new salary for you ");
            System.out.println(discount());
        }
        else if ( r < 5 ){
            System.out.println("you can take  another  "+(5-r)+"  days off  ");
        }  
    }
    @Override
    public void goup() {
        System.out.println(" enter the number of working years ");
        int r = in.nextInt() ;
        if (r > 7 ){
            System.out.println(" you can   apply to get a high work position ");
        }
        else {
            System.out.println(" you have not pass the limit of working years to get a high work position  ");
        }
    }
    @Override
    public void isfired() {
        System.out.println(" enter the number of days off in this year ");
        int q = in.nextInt();
        System.out.println(" how long have you worked for this company  ");
        int h = in.nextInt() ;
        if (q > 35 && h < 2){
            System.out.println(" you're fired ");
        }
        else {
            System.out.println(" you're a good employee , keep on ");
        }   
    }
    @Override
    public String speciality() {
        return this.speciality ;
    }
    @Override
    public void academicRules() {
        System.out.println(" you are a perfect teacher  ");   
    }

    @Override
    public String typeOfPerson() {
        return"  teacher   "+this.speciality ;
    }
}
// ________________________________________________________________
public class Main1 {
// a.	A Method that receives an array of persons and sorts them by age such that all employee must appear before all students. 
public static void SortAge(Person arr[]) {

        for (int i = 0; i < arr.length; i++) {
            
            for (int q =0 ; q < arr.length -1-i ; q++){
                if (arr[q].getAge() > arr[q+1].getAge()){
                    Person m = arr[q] ;
                    arr[q] = arr[q+1] ;
                    arr[q+1] = m ;
                }
            }
        }
        for ( int i =0 ; i < arr.length ; i++){
            if (arr[i] instanceof Employee ){
                System.out.println(arr[i].getAge() + "\t"+arr[i].getName()+ "  \t  " +"Employee \t "+arr[i].typeOfPerson());    
            }
        }
        for ( int i =0 ; i < arr.length ; i++){
            if (arr[i] instanceof Student  ){
                System.out.println(arr[i].getAge() + "\t" + arr[i].getName()+ "  \t  " +"Student \t "+arr[i].typeOfPerson());  

            }
        }
    }
// displays a table of names and classnames and salaries .
    public static void table (Paid arr []){
        System.out.println("the name \ttha class \t    the salary ");
        System.out.println("________________________________________________");
        for (int i =0 ; i< arr.length ; i++){
           if (arr[i] instanceof Teacher ){
               Teacher t = (Teacher)arr[i] ;
               System.out.println(t.getName() + "\t \t"+"Teacher"+" \t      "+arr[i].salary());
           }
           else if (arr[i] instanceof Administrative ){
               Administrative t = (Administrative)arr[i] ;
               System.out.println(t.getName() + "\t \t"+"Administrative "+"       " +arr[i].salary());
           } 
        }
    }
    // to sort the Acadimic by speciality.
    public static void sortspeciality (Academic arr []){
    
        for (int i =0 ; i< arr.length ; i++){
            for ( int n =0 ; n< arr.length -1-i ;n++){
                if (arr[n].speciality().compareTo(arr[n+1].speciality())>0){
                    Academic a = arr[n] ;
                    arr[n] = arr[n+1] ;
                    arr [n+1] = a ;
                }
            }
        }
        System.out.println("the name \t the speciality ");
        System.out.println("_________________________________");
        for (int i =0 ; i< arr.length ;i++){
            if (arr[i] instanceof Student ){
                Student y = (Student)arr[i] ;
                System.out.println(y.getName()+"\t"+arr[i].speciality());
            }
            else if (arr[i] instanceof Teacher ){
                Teacher y = (Teacher)arr[i] ;
                System.out.println(y.getName()+"\t"+arr[i].speciality());
            }
        }
    }
    
    public static void main(String[] args) {

        // arrays of hours for each material
        int a1[] = {3, 3, 3, 4, 2, 3};
        int a2[] = {3, 2, 3, 4, 2, 1};

        // arrays of marks for each material 
        int m1[] = {90, 88, 78, 96, 94, 92};
        int m2[] = {90, 88, 65, 66, 94, 92};

        // arrays of courses 
        String c1[] = {"english 1", "physics 2 ", "calculas 3 ", "java", "c++", "ph.lap"};
        String c2[] = {"css ", "as", "oop", "lap", "ai", "ma"};

        //arrays of service 
        String s1[] = {"add courses", "remove courses", "edit plane"};
        String s2[] = {"check ", "remove ", "edit marks ", "add exam"};

        // objects of person 
        // students object 
        Person p1 = new Student("eng", a1, m1, 84.1, 24, 202210440, "Alaa toma ", "tullkarm", "ala*0891896", 19);
        Person p2 = new Student("doc", a2, m2, 78.5, 24, 20205469, "fathi ", "nablus", "ala*0891896", 21);
        // teachers objects 

        Person p3 = new Teacher(c1, 6, "alk@gmail.com", 1550,"  computer engineering "," engineering", 2015, 160, 30, "Bachelor's", 202314562, "sobhi        ", "ramallah", 40, "der*54684");
        Person p4 = new Teacher(c2, 6, "acrt@gmail.com", 7845,"accounter", " Accounting", 2018, 150, 25, "Bachelor's", 202218754, "saaeed", "tulkarm", 35, "kij+458712");
        // administrative objects

        Person p5 = new Administrative("head of the department", "0514789632", 210, s1, " engineer", 2020, 165, 35.0, "master", 202354789, "lateef", "nablis", 45, "hjk*974524");
        Person p6 = new Administrative("President Assistant", "059815225", 321, s2, " Art", 2016, 145, 25.0, "Bachelor's", 5080804, "mahmoud", "nablis", 37, "kj*154610");

        // array of person include ( student & teacger & Administrative )
        Person prr[] = {p1, p2, p3, p4, p5, p6};
        
        SortAge(prr) ;

        // objects of paid 
        Paid q1 = new Teacher (c1,6,"asd@gmail.com",1230,"lowyer" ,"law",2013,154,36.2,"master",2535522,"ahmed","palestine",45,"lkj*987456");
        Paid q2 = new Teacher (c2 , 6, "dll@gmail.com",2581,"architectural","engineering",2019,154,26.5,"ph.d",2587413,"alma","tulkarm",34,"mnb*69854");
        Paid q3 = new Teacher (c1,6,"hg@gmail.com",5487,"computer engineering","engineering",2045,145,36.3,"Bachelor's",5487210,"lena","nablus",45,"lkj+548762");
        Paid q4 = new Administrative ("head of the department","0471825632",142,s1,"art",2020,145,36.2,"ph.d",587126,"kamal","ramallah",48,"uhy++64644");
        Paid q5 = new Administrative ("maneger","2854179633",258,s2,"coding",2023,155,37.2,"master",9632145,"ali","ramallah",35,"jh*852147");

        // array of paid 
        
        Paid [] pp ={q1,q2,q3,q4,q5};
        table(pp);
        
        Academic aa1 = new Student ("eng", a1, m1, 84.1, 24, 202210440, "Alaa toma ", "tullkarm", "ala*0891896", 19);
        Academic aa2 = new Student ("doc", a2, m2, 78.5, 24, 20205469, "fathi     ", "nablus", "ala*0891896", 21);
        Academic aa3 = new Teacher (c1,6,"asd@gmail.com",1230,"lowyer" ,"law",2013,154,36.2,"master",2535522,"ahmed     ","palestine",45,"lkj*987456");
        Academic aa4 = new Teacher (c2 , 6, "dll@gmail.com",2581,"architectural","engineering",2019,154,26.5,"ph.d",2587413,"alma     ","tulkarm",34,"mnb*69854");
        
        Academic aar [] = {aa1, aa2, aa3, aa4};
        
        sortspeciality(aar);
    }
}

